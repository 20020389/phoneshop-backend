// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  STORE
  DEFAULT
}

enum TransactionStatus {
  PROCESSING
  SUCCESS
  REFUSE
}

model User {
  id           Int           @id @default(autoincrement())
  uid          String        @unique @default(dbgenerated("(UUID())"))
  email        String        @unique
  password     String
  name         String?
  image        String?
  phoneNumber  String?
  profile      String?
  role         UserRole      @default(DEFAULT)
  verified     Boolean       @default(false)
  updateAt     DateTime      @default(now())
  lastLogin    DateTime      @default(now())
  registeredAt DateTime      @default(now())
  Store        Store[]
  Transaction  Transaction[]
  Cart         Cart?
  PhoneRating  PhoneRating[]
}

model Store {
  id           Int           @id @default(autoincrement())
  uid          String        @unique @default(dbgenerated("(UUID())"))
  name         String
  location     String
  group        String // Hà Nội - Hồ Chí Minh
  phoneNumber  String?
  products     Phone[]
  managers     User[]
  transactions Transaction[]
  updateAt     DateTime      @default(now())
  createAt     DateTime      @default(now())
}

model Phone {
  id          Int           @id @default(autoincrement())
  uid         String        @unique @default(dbgenerated("(UUID())"))
  name        String
  price       Int
  quantity    Int           @default(0)
  images      String?
  tags        String? //keyword hỗ trợ tìm kiếm
  profile     String?
  description String?
  detail      String? // thông số kỹ thuật
  sold        String? // uid của transaction, chưa bán là null  
  rating      Float
  offers      PhoneOffer[]
  ratingInfo  PhoneRating[]
  Stores      Store         @relation(fields: [storeId], references: [uid])
  storeId     String
  updateAt    DateTime      @default(now())
  createAt    DateTime      @default(now())
}

model PhoneOffer {
  id      Int    @id @default(autoincrement())
  uid     String @unique @default(dbgenerated("(UUID())"))
  price   Int
  color   String //array
  storage String
  Phone   Phone  @relation(fields: [phoneId], references: [uid])
  phoneId String
}

model PhoneRating {
  id          Int    @id @default(autoincrement())
  uid         String @unique @default(dbgenerated("(UUID())"))
  ratingValue Float
  user        User?  @relation(fields: [userId], references: [id])
  Phone       Phone  @relation(fields: [phoneId], references: [uid])
  phoneId     String
  userId      Int?
}

model Transaction {
  id         Int               @id @default(autoincrement())
  uid        String            @unique @default(dbgenerated("(UUID())"))
  productsID StringTemplate[]
  status     TransactionStatus
  consumer   User?             @relation(fields: [userId], references: [uid])
  userId     String?
  providers  Store             @relation(fields: [storeId], references: [id])
  updateAt   DateTime          @default(now())
  createAt   DateTime          @default(now())
  storeId    Int
}

model Cart {
  id     Int              @id @default(autoincrement())
  uid    String           @unique @default(dbgenerated("(UUID())"))
  User   User             @relation(fields: [userId], references: [uid])
  userId String           @unique
  phones StringTemplate[]
}

// define based
model StringTemplate {
  id            Int          @id @default(autoincrement())
  value         String
  Transaction   Transaction? @relation(fields: [transactionId], references: [id])
  transactionId Int?
  Cart          Cart?        @relation(fields: [cartId], references: [id])
  cartId        Int?
}

model FileModel {
  id       Int      @id @default(autoincrement())
  uid      String   @unique @default(dbgenerated("(UUID())"))
  path     String
  type     String
  updateAt DateTime @default(now())
  createAt DateTime @default(now())
}
